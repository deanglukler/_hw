JavaScript ES6
--------------






babeljs(.io)
------------
//transpile your es6


--------------------------------------------------------





destructuring
-------------
//very useful for large objects if you wanna just snatch a value

var foo = {
  bar: 1,
  baz: 2
};

var { bar, baz } = foo;
//or just bar
var { bar } = foo;

-

arrays
---
var tenses = ['me', 'you', 'he'];

var [ firstPerson, secondPerson ] = tenses;

-

function arguments
---
Promise.all([ promise1, promise2 ]).then(function( [ results1, results2 ]){ ... });


-

building objs
---
var foo = 2;

var obj = {
  bar: 1,
  foo, //<=== variable already exists
}


-


arguments
---
//ex - old javascript

function calcBmi(weight, height, max, cb) { // <==== then you would probably pass in an obj.. meh
  var bmi = weight / Math.pow(height, 2);
  if(bmi > max) {
    console.log("you're overweight");
  }
  if(cb) {
    cb(bmi);
  }
 }
calcBmi( weight, height, max );
calcBmi( weight, height, null, function(){ ... } );

-

//es6 ...

function calcBmi({ weight: w, height, max = 25, cb }) { //max has default of 25 if undefined
  //now weight comes in as w..
  var bmi = w / Math.pow(height, 2);
  if(bmi > max) {
    console.log("you're overweight");
  }
  if(cb) {
    cb(bmi);
  }
}
calcBmi({ height, weight, max: 25 }); //notice you don't need to pass them in order..
calcBmi({ weight, height, cb: function(){ ... } });





--------------------------------------------------------






import n export
---------------

//ex - myModule
export default { .. };

export function foo() { .. }

export function bar() { .. }

//another file..

import myModule from 'myModule';

//or deconstruct it
import { foo, bar } from 'myModule';

//or
import { foo as foolish, bar } from "myModule";

//deconstructing is great with lodash if you just need a couple things
import { each, omit } from "lodash";







--------------------------------------------------------






classes
-------
class Person {

  constructor(fullName, favColor) {
    this.name = fullName;
    this.favoriteColor = favColor;
  }

  //methods..
  //original javascript.. this.greet = function() {
  greet(){ //es6
    console.log("He, my name is " + this.name + " and my favourite color is " + this.favoriteColor + ".");
  }

}



-

Extend classes
---
class Adult extends Person {
  payTaxes() {
    console.log(this.name + 'owes zero taxes');
  }
}

var john = new Person('John Smith', "blue");
john.greet();

var jane = new Adult('Jane Smith', "green");
jane.greet(); //defined in the Person Class inside Person.js
jane.payTaxes();






------------------------------------------------------------------------------






Arrow Function's
----------------
//implicit returns if function is one line
//no argument brackets if only one argument on one liner

//Unlike a regular function declaration, an arrow function inherits this from the scope it is declared in.

//Oh, and don't forget. Arrow functions are always anonymous

Guides to choose what style to use
---
Top level functions should use function.
Functions meant to be invoked with a this context must use function.
Functions defined and passed inline as arguments are good candidates for arrow functions.


//ex - map
//ES5

[1, 2, 3, 4].map(function(value) {
  return value * value;
});

//ES6

// in this case we remove the function keyword and add the arrow
[1, 2, 3, 4].map((value) => {
  return value * value;
});


-

//when returning an object you need to use brackets otherwise the function see the curlay braces as the function body

[1, 2, 3, 4].map((value) => ( { property : value } ));

-

// if there is a single parameter and a single expression within the function, we can omit the parenthesis and return keyword
[1, 2, 3, 4].map(value => value * value);







------------------------------------------------------------------------------



##Spread

//to clone arrays and objs

###Syntax
//For function calls:

myFunction(...iterableObj);

###For array literals:

[...iterableObj, 4, 5, 6];

###For object literals (new in ECMAScript; stage 3 draft):

let objClone = { ...obj };

























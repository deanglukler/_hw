### compiling projects (run in the root of project)
mix compile


# others
elixir
elixirc


### dependencies
# get
mix deps.get

# update
mix deps.update --all



# logging
IO.puts "Great for Strings"

#great for complicated data
IO.inspect variable






# basic types
iex> 1          # integer
iex> 0x1F       # integer
iex> 1.0        # float
iex> true       # boolean
iex> :atom      # atom / symbol
iex> "elixir"   # string
iex> [1, 2, 3]  # list
iex> {1, 2, 3}  # tuple


# get number from binary ex 27..
0b11011
27

# basic arithmatic
1 == 1.0
true

1 === 1.0
false




# atoms
:hello

:hello == :world
false






# strings (use double quotes!)
# Single quotes are charlists, double quotes are strings.
"hellö"

# join strings
"hello" <> "world"
"helloworld"


# string interpolation
"hellö #{:world}"
"hellö world"

# string with line breaks
"hello
world"
"hello\nworld"








# functions

add = fn a, b -> a + b end
add(1, 2)
3

is_function(add)
true

is_function(add, 2) # check if add is a function that expects exactly 2 arguments
true

is_function(add, 1) # check if add is a function that expects exactly 1 argument
false

# anon functions can also have multiple clauses and guards
iex> f = fn
...>   x, y when x > 0 -> x + y
...>   x, y -> x * y
...> end


# do/end blocks are always bound to the outermost function call.
# For example, the following expression
iex> is_number if true do
...>  1 + 2
...> end
# Would be parsed as:
iex> is_number(if true) do
...>  1 + 2
...> end
** (CompileError) undefined function: is_number/2

# Adding explicit parentheses is enough to bind the block to if
iex> is_number(if true do
...>  1 + 2
...> end)
true



# passing options to functions
iex> if false, do: :this, else: :that
:that

# equivalent to:
iex> if(false, [do: :this, else: :that])
:that

# Which, as we have seen above, is the same as:
iex> if(false, [{:do, :this}, {:else, :that}])
:that

# In general, when the keyword list is the last argument of a function, the square brackets are optional.







# lists

[1, 2, true, 3]

// concat add lists
[1, 2, 3] ++ [4, 5, 6]


[1, true, 2, false, 3, true] -- [true, false]
[1, 2, 3, true]

# list head (first element) and tail (remaining elements)
list = [1, 2, 3]
hd(list)
1

tl(list)
[2, 3]


# When Elixir sees a list of printable ASCII numbers, Elixir will print that as a charlist (literally a list of characters)
iex> [11, 12, 13]
'\v\f\r'
iex> [104, 101, 108, 108, 111]
'hello'







# Tuples

iex> tuple = {:ok, "hello"}
{:ok, "hello"}

elem(tuple, 1)
"hello"

tuple_size(tuple)
2

put_elem(tuple, 1, "world")
{:ok, "world"}




# logic comparison

# comparing defferent data types
1 < :atom
true

# The overall sorting order is defined below:
number < atom < reference < function < port < pid < tuple < map < list < bitstring





# match operator ( = )
x = 1
1

# returns the number since it matches
1 = x
1

# When the sides do not match, a MatchError is raised
2 = x
** (MatchError) no match of right hand side value: 1














# pattern matching
# useful for destructuring more complex data types

{a, b, c} = {:hello, "world", 42}
{:hello, "world", 42}

a
:hello

b
"world"



# the left side will only match the right side when the 
# right side is a tuple that starts with the atom :ok
{:ok, result} = {:ok, 13}
{:ok, 13}
result
13

iex> {:ok, result} = {:error, :oops}
** (MatchError) no match of right hand side value: {:error, :oops}




# this will error if tuples have different lengths
{a, b, c} = {:hello, "world"}
** (MatchError) no match of right hand side value: {:hello, "world"}

# lists don't match with tuples
{a, b, c} = [:hello, "world", 42]
** (MatchError) no match of right hand side value: [:hello, "world", 42]




# match on specific values.
# The example below asserts that the left side will only match the right side when the right side is a tuple that starts with the atom :ok


# ex pattern matching function arguments
def callback(%{assigns: %{ueberauth_auth: auth}} = conn, _params) do
  ...
end



# pattern matching lists
[a, b, c] = [1, 2, 3]

a
1

# match lists on their head or tail
[head | tail] = [1, 2, 3]

head
1
tail
[2, 3]

[h | t] = []
** (MatchError) no match of right hand side value: []



# prepend something to a list..
list = [1, 2, 3]

[0 | list]
[0, 1, 2, 3]





# pattern matching keyword lists
# rarely done in practice since pattern matching on lists requires the number of items and their order to match:

[a: a] = [a: 1]
[a: 1]

a
1

[a: a] = [a: 1, b: 2]
** (MatchError) no match of right hand side value: [a: 1, b: 2]

[b: b, a: a] = [a: 1, b: 2]
** (MatchError) no match of right hand side value: [a: 1, b: 2]




# pattern matching maps 
%{} = %{:a => 1, 2 => :b}
%{2 => :b, :a => 1}

%{:a => a} = %{:a => 1, 2 => :b}
%{2 => :b, :a => 1}

a
1

%{:c => c} = %{:a => 1, 2 => :b}
** (MatchError) no match of right hand side value: %{2 => :b, :a => 1}





# the pin operator ^
# when you want to pattern match against an existing variable’s value rather than rebinding the variable
x = 1
1

^x = 2
** (MatchError) no match of right hand side value: 2
{y, ^x} = {2, 1}
{2, 1}

y
2

{y, ^x} = {2, 2}
** (MatchError) no match of right hand side value: {2, 2}



# pattern matching the underscore, _.

[h | _] = [1, 2, 3]
[1, 2, 3]

h
1

iex> _
** (CompileError) iex:1: invalid use of _. "_" represents a value to be ignored in a pattern and cannot be used in expressions








# case
iex> case {1, 2, 3} do
...>   {4, 5, 6} ->
...>     "This clause won't match"
...>   {1, x, 3} ->
...>     "This clause will match and bind x to 2 in this clause"
...>   _ ->
...>     "This clause would match any value"
...> end




# If you want to pattern match against an existing variable, you need to use the ^ operator:
iex> x = 1
1

iex> case 10 do
...>   ^x -> "Won't match"
...>   _ -> "Will match"
...> end



# Clauses and guards:
iex> case {1, 2, 3} do
...>   {1, x, 3} when x > 0 ->
...>     "Will match"
...>   _ ->
...>     "Would match, if guard condition were not satisfied"
...> end




# Errors in guards do not leak but simply make the guard fail:
iex> hd(1)
** (ArgumentError) argument error
iex> case 1 do
...>   x when hd(x) -> "Won't match"
...>   x -> "Got #{x}"
...> end


# if none of the clause match an error is raise
iex> case :ok do
...>   :error -> "Won't match"
...> end
** (CaseClauseError) no case clause matching: :ok












# cond condition
iex> cond do
...>   2 + 2 == 5 ->
...>     "This is never true"
...>   2 * 2 == 3 ->
...>     "Nor this"
...>   true ->
...>     "This is always true (equivalent to else)"
...> end
# If none of the conditions return true, an error (CondClauseError) is raised.











# if and unless
# useful for one condition
iex> if true do
...>   "This works!"
...> end
"This works!"
iex> unless true do
...>   "This will never be seen"
...> end
nil

# also else is available
iex> if nil do
...>   "This won't be seen"
...> else
...>   "This will"
...> end
"This will"

# without do/end blocks
iex> if true, do: 1 + 2
3











# keyword lists
# Keys must be atoms.
# Keys are ordered, as specified by the developer.
# Keys can be given more than once.

list = [{:a, 1}, {:b, 2}]
[a: 1, b: 2]

list == [a: 1, b: 2]
true

#  Elixir supports a special syntax for defining such lists: [key: value]
# we can use ++ to add new values to a keyword list
list ++ [c: 3]
[a: 1, b: 2, c: 3]

[a: 0] ++ list
[a: 0, a: 1, b: 2]

# lookup
new_list = [a: 0] ++ list
[a: 0, a: 1, b: 2]

new_list[:a]
0











# maps
# %{} syntax
# Maps allow any value as a key.
# Maps’ keys do not follow any ordering.

map = %{:a => 1, 2 => :b}
%{2 => :b, :a => 1}

map[:a]
1

map[2]
:b

map[:c]
nil



# When all the keys in a map are atoms, you can use the keyword syntax for convenience:
iex> map = %{a: 1, b: 2}
%{a: 1, b: 2}



Map.get(%{:a => 1, 2 => :b}, :a)
1

Map.put(%{:a => 1, 2 => :b}, :c, 3)
%{2 => :b, :a => 1, :c => 3}

Map.to_list(%{:a => 1, 2 => :b})
[{2, :b}, {:a, 1}]

# update a key value of a map
map = %{:a => 1, 2 => :b}
%{2 => :b, :a => 1}

%{map | 2 => "two"}
%{2 => "two", :a => 1}

%{map | :c => 3}
** (KeyError) key :c not found in: %{2 => :b, :a => 1}



# accessing atom keys:
map = %{:a => 1, 2 => :b}
%{2 => :b, :a => 1}

map.a
1

iex> map.c
** (KeyError) key :c not found in: %{2 => :b, :a => 1}













# Modules

iex> defmodule Math do
...>   def sum(a, b) do
...>     a + b
...>   end
...> end

Math.sum(1, 2)
3















# Reduce example
Enum.reduce(words, %{}, &Words.wordsToMap/2)



































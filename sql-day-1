sql
===============

Getting started:
- http://www.sqlteaching.com/
- https://www.codecademy.com/courses/learn-sql

Related tutorials:
- [MySQL-CLI](https://www.youtube.com/playlist?list=PLfdtiltiRHWEw4-kRrh1ZZy_3OcQxTn7P)
- [Analyzing Business Metrics](https://www.codecademy.com/learn/sql-analyzing-business-metrics)
- [SQL joins infografic](https://lh4.googleusercontent.com/-RdjzcoAwBYg/UxTXWGJHgoI/AAAAAAAACrs/Gqbu6zyksgo/w852-h670/sql-joins.jpg)

Tools:
- [DataGrip](https://www.jetbrains.com/datagrip/)
- [Sequel Pro](http://www.sequelpro.com/)




----------------------------------------------------


-- passwords
If you lose this password, please consult the section How to Reset the Root Password in the MySQL reference manual.

//help resetting password.. http://stackoverflow.com/questions/30692812/mysql-user-db-does-not-have-password-columns-installing-mysql-on-osx



-------------------------------------------------------


-- commands

Some interesting flags (to see all, use -h):

    -E: will describe the underlaying queries of the \ commands (cool for learning!)
    -l: psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS)


Most \d commands support additional param of __schema__.name__ and accept wildcards like *.*

    \q: Quit/Exit
    \c __database__: Connect to a database
    \d __table__: Show table definition including triggers
    \l: List databases
    \dy: List events
    \df: List functions
    \di: List indexes
    \dn: List schemas
    \dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones)
    \dv: List views
    \df+ __function__ : Show function SQL code.
    \x: Pretty-format query results instead of the not-so-useful ASCII tables
    \copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV: Export a table as CSV


\d[S+]                 list tables, views, and sequences

\d[S+]  NAME           describe table, view, sequence, or index

\da[S]  [PATTERN]      list aggregates
\db[+]  [PATTERN]      list tablespaces

\dt[S+] [PATTERN]      list tables
\dT[S+] [PATTERN]      list data types

\dv[S+] [PATTERN]      list views
\dE[S+] [PATTERN]      list foreign tables

\l[+]   [PATTERN]      list databases


Input/Output
  \copy ...              perform SQL COPY with data stream to the client host
  \echo [STRING]         write string to standard output
  \i FILE                execute commands from file
  \ir FILE               as \i, but relative to location of current script
  \o [FILE]              send all query results to file or |pipe
  \qecho [STRING]        write string to query output stream (see \o)



Other
  \q // quit

  \c databasename // to use databasename

  psql databasename // enter specific psql database

  psql -U vagrant -d template1 // start postgreSQL with username and database



    User Related:

        \du: List users
        \du __username__: List a username if present.
        create role __test1__: Create a role with an existing username.
        create role __test2__ noinherit login password __passsword__;: Create a role with username and password.
        set role __test__;: Change role for current session to __test__.
        grant __test2__ to __test1__;: Allow __test1__ to set its role as __test2__.






    Configuration

        Service management commands:

    sudo service postgresql stop
    sudo service postgresql start
    sudo service postgresql restart

        Changing verbosity & querying Postgres log:
        1) First edit the config file, set a decent verbosity, save and restart postgres:




  --------------------------------------------







  # cheatsheet

  CREATE DATABASE

  CREATE DATABASE dbName;

  CREATE TABLE (with auto numbering integer id)

  CREATE TABLE tableName (
   id serial PRIMARY KEY,
   name varchar(50) UNIQUE NOT NULL,
   dateCreated timestamp DEFAULT current_timestamp
  );

  Add a primary key

  ALTER TABLE tableName ADD PRIMARY KEY (id);

  Create an INDEX

  CREATE UNIQUE INDEX indexName ON tableName (columnNames);

  Backup a database (command line)

  pg_dump dbName > dbName.sql

  Backup all databases (command line)

  pg_dumpall > pgbackup.sql

  Run a SQL script (command line)

  psql -f script.sql databaseName

  Search using a regular expression

  SELECT column FROM table WHERE column ~ 'foo.*';

  The first N records

  SELECT columns FROM table LIMIT 10;

  Pagination

  SELECT cols FROM table LIMIT 10 OFFSET 30;

  Prepared Statements

  PREPARE preparedInsert (int, varchar) AS
  INSERT INTO tableName (intColumn, charColumn) VALUES ($1, $2);
  EXECUTE preparedInsert (1,'a');
  EXECUTE preparedInsert (2,'b');
  DEALLOCATE preparedInsert;

  Create a Function

  CREATE OR REPLACE FUNCTION month (timestamp) RETURNS integer
   AS 'SELECT date_part(''month'', $1)::integer;'
  LANGUAGE 'sql';

  Table Maintenance

  VACUUM ANALYZE table;

  Reindex a database, table or index

  REINDEX DATABASE dbName;

  Show query plan

  EXPLAIN SELECT * FROM table;

  Import from a file

  COPY destTable FROM '/tmp/somefile';

  Show all runtime parameters

  SHOW ALL;

  Grant all permissions to a user

  GRANT ALL PRIVILEGES ON table TO username;

  Perform a transaction

  BEGIN TRANSACTION
   UPDATE accounts SET balance += 50 WHERE id = 1;
  COMMIT;

  Basic SQL
  Get all columns and rows from a table

  SELECT * FROM table;

  Add a new row

  INSERT INTO table (column1,column2)
  VALUES (1, 'one');

  Update a row

  UPDATE table SET foo = 'bar' WHERE id = 1;

  Delete a row

  DELETE FROM table WHERE id = 1;




  #######################################################################



user and password
---


Basic Commands
---
See which port mysql runs on    mysql> SHOW GLOBAL VARIABLES LIKE 'PORT';

List all databases  SHOW DATABASES;   SHOW DATABASES;

Create database   CREATE DATABASE database;   CREATE DATABASE PhoneDB;

Use a database  USE database;   USE PhonDB;

List tables in the database   SHOW TABLES;  SHOW TABLES;

Show the structure of a table   DESCRIBE table;

SHOW COLUMNS FROM table;  DESCRIBE Animals;

SHOW COLUMNS FROM Animals;

Delete a database (Careful!)  DROP DATABASE database;   DROP DATABASE PhoneDB;








Commands
-----------

Access monitor: `mysql -u [username] -p;` (will prompt for password)

Show all databases: `show databases;`

Access database: `mysql -u [username] -p [database]` (will prompt for password)

Create new database: `create database [database];`

Select database: `use [database];`

Determine what database is in use: `select database();`

Show all tables: `show tables;`

Show table structure: `describe [table];`

List all indexes on a table: `show index from [table];`

Create new table with columns: `CREATE TABLE [table] ([column] VARCHAR(120), [another-column] DATETIME);`

Adding a column: `ALTER TABLE [table] ADD COLUMN [column] VARCHAR(120);`

Adding a column with an unique, auto-incrementing ID: `ALTER TABLE [table] ADD COLUMN [column] int NOT NULL AUTO_INCREMENT PRIMARY KEY;`

Inserting a record: `INSERT INTO [table] ([column], [column]) VALUES ('[value]', [value]');`

MySQL function for datetime input: `NOW()`

Selecting records: `SELECT * FROM [table];`

Explain records: `EXPLAIN SELECT * FROM [table];`

Selecting parts of records: `SELECT [column], [another-column] FROM [table];`

Counting records: `SELECT COUNT([column]) FROM [table];`

Counting and selecting grouped records: `SELECT *, (SELECT COUNT([column]) FROM [table]) AS count FROM [table] GROUP BY [column];`

Selecting specific records: `SELECT * FROM [table] WHERE [column] = [value];` (Selectors: `<`, `>`, `!=`; combine multiple selectors with `AND`, `OR`)

Select records containing `[value]`: `SELECT * FROM [table] WHERE [column] LIKE '%[value]%';`

Select records starting with `[value]`: `SELECT * FROM [table] WHERE [column] LIKE '[value]%';`

Select records starting with `val` and ending with `ue`: `SELECT * FROM [table] WHERE [column] LIKE '[val_ue]';`

Select a range: `SELECT * FROM [table] WHERE [column] BETWEEN [value1] and [value2];`

Select with custom order and only limit: `SELECT * FROM [table] WHERE [column] ORDER BY [column] ASC LIMIT [value];` (Order: `DESC`, `ASC`)

Updating records: `UPDATE [table] SET [column] = '[updated-value]' WHERE [column] = [value];`

Deleting records: `DELETE FROM [table] WHERE [column] = [value];`

Delete *all records* from a table (without dropping the table itself): `DELETE FROM [table];`
(This also resets the incrementing counter for auto generated columns like an id column.)

Delete all records in a table: `truncate table [table];`

Removing table columns: `ALTER TABLE [table] DROP COLUMN [column];`

Deleting tables: `DROP TABLE [table];`

Deleting databases: `DROP DATABASE [database];`

Custom column output names: `SELECT [column] AS [custom-column] FROM [table];`

Export a database dump (more info [here](http://stackoverflow.com/a/21091197/1815847)): `mysqldump -u [username] -p [database] > db_backup.sql`

Use `--lock-tables=false` option for locked tables (more info [here](http://stackoverflow.com/a/104628/1815847)).

Import a database dump (more info [here](http://stackoverflow.com/a/21091197/1815847)): `mysql -u [username] -p -h localhost [database] < db_backup.sql`

Logout: `exit;`





Aggregate functions
-----------

Select but without duplicates: `SELECT distinct name, email, acception FROM owners WHERE acception = 1 AND date >= 2015-01-01 00:00:00`

Calculate total number of records: `SELECT SUM([column]) FROM [table];`

Count total number of `[column]` and group by `[category-column]`: `SELECT [category-column], SUM([column]) FROM [table] GROUP BY [category-column];`

Get largest value in `[column]`: `SELECT MAX([column]) FROM [table];`

Get smallest value: `SELECT MIN([column]) FROM [table];`

Get average value: `SELECT AVG([column]) FROM [table];`

Get rounded average value and group by `[category-column]`: `SELECT [category-column], ROUND(AVG([column]), 2) FROM [table] GROUP BY [category-column];`





Multiple tables
-----------

Select from multiple tables: `SELECT [table1].[column], [table1].[another-column], [table2].[column] FROM [table1], [table2];`

Combine rows from different tables: `SELECT * FROM [table1] INNER JOIN [table2] ON [table1].[column] = [table2].[column];`

Combine rows from different tables but do not require the join condition: `SELECT * FROM [table1] LEFT OUTER JOIN [table2] ON [table1].[column] = [table2].[column];` (The left table is the first table that appears in the statement.)

Rename column or table using an _alias_: `SELECT [table1].[column] AS '[value]', [table2].[column] AS '[value]' FROM [table1], [table2];`





Users functions
-----------

List all users: `SELECT User,Host FROM mysql.user;`

Create new user: `CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';`

Grant `ALL` access to user for `*` tables: `GRANT ALL ON database.* TO 'user'@'localhost';`


Find out the IP Address of the Mysql Host
-----------
`SHOW VARIABLES WHERE Variable_name = 'hostname';` ([source](http://serverfault.com/a/129646))























